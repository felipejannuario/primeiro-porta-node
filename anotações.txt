Beleza, Felipe. Vamos organizar isso de forma clara pra voc√™ deixar no seu `anota√ß√µes.txt`. Vou te mostrar passo a passo como usar as rotas do seu backend com Node.js, Express e Prisma, incluindo exemplos de GET, POST, PUT e DELETE. üëä

---

# **Anota√ß√µes do Backend - Node.js + Express + Prisma**

## **1. Estrutura b√°sica do servidor**

```js
import express from "express";
import cors from "cors";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
const app = express();

app.use(express.json()); // Para interpretar JSON no body das requisi√ß√µes
app.use(cors()); // Permite que o front acesse a API

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
```

---

## **2. Rotas principais**

### **2.1 GET - Listar todos os usu√°rios**

```js
app.get("/usuarios", async (req, res) => {
  try {
    const users = await prisma.user.findMany();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: "Erro ao buscar usu√°rios" });
  }
});
```

* **Como usar:**

  * Endpoint: `GET http://localhost:3000/usuarios`
  * Retorna todos os usu√°rios do banco.

---

### **2.2 GET - Buscar usu√°rio por ID**

```js
app.get("/usuarios/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const user = await prisma.user.findUnique({ where: { id: Number(id) } });
    if (!user) return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: "Erro ao buscar usu√°rio" });
  }
});
```

* **Como usar:**

  * Endpoint: `GET http://localhost:3000/usuarios/1`
  * Retorna o usu√°rio com o ID espec√≠fico.

---

### **2.3 POST - Criar novo usu√°rio**

```js
app.post("/usuarios", async (req, res) => {
  const { nome, email } = req.body;
  try {
    const novoUser = await prisma.user.create({ data: { nome, email } });
    res.status(201).json(novoUser);
  } catch (error) {
    res.status(500).json({ error: "Erro ao criar usu√°rio" });
  }
});
```

* **Como usar:**

  * Endpoint: `POST http://localhost:3000/usuarios`
  * Body (JSON):

    ```json
    {
      "nome": "Felipe",
      "email": "felipe@email.com"
    }
    ```

---

### **2.4 PUT - Atualizar usu√°rio**

```js
app.put("/usuarios/:id", async (req, res) => {
  const { id } = req.params;
  const { nome, email } = req.body;
  try {
    const userAtualizado = await prisma.user.update({
      where: { id: Number(id) },
      data: { nome, email }
    });
    res.json(userAtualizado);
  } catch (error) {
    res.status(500).json({ error: "Erro ao atualizar usu√°rio" });
  }
});
```

* **Como usar:**

  * Endpoint: `PUT http://localhost:3000/usuarios/1`
  * Body (JSON):

    ```json
    {
      "nome": "Felipe Atualizado",
      "email": "novoemail@email.com"
    }
    ```

---

### **2.5 DELETE - Deletar usu√°rio**

```js
app.delete("/usuarios/:id", async (req, res) => {
  const { id } = req.params;
  try {
    await prisma.user.delete({ where: { id: Number(id) } });
    res.json({ mensagem: "Usu√°rio deletado com sucesso" });
  } catch (error) {
    res.status(500).json({ error: "Erro ao deletar usu√°rio" });
  }
});
```

* **Como usar:**

  * Endpoint: `DELETE http://localhost:3000/usuarios/1`
  * Remove o usu√°rio do banco de dados.

---

## **3. Testando a API**

* Pode usar o **Thunder Client** ou **Postman**.
* Para o frontend (React/Angular/Vanilla JS), use `axios` ou `fetch` para fazer requisi√ß√µes para `http://localhost:3000/usuarios`.

---

Se quiser, posso te montar uma **vers√£o enxuta em estilo cheatsheet** s√≥ com os exemplos de requisi√ß√£o e o que cada rota faz, perfeita pra colar no seu `anota√ß√µes.txt`. Isso deixaria bem mais r√°pido de consultar.

Quer que eu fa√ßa essa vers√£o?


Beleza, Felipe! Aqui vai o **cheatsheet enxuto do seu backend**, pronto pra colar no `anota√ß√µes.txt`. Tudo direto ao ponto, estilo ‚Äúolha o c√≥digo e sabe o que faz‚Äù. üëä

---

# **Cheatsheet Backend Node + Express + Prisma**

### **1. Listar todos os usu√°rios**

```
GET /usuarios
Retorna todos os usu√°rios
Ex.: GET http://localhost:3000/usuarios
```

### **2. Buscar usu√°rio por ID**

```
GET /usuarios/:id
Retorna usu√°rio espec√≠fico
Ex.: GET http://localhost:3000/usuarios/1
```

### **3. Criar novo usu√°rio**

```
POST /usuarios
Cria usu√°rio novo
Body JSON:
{
  "nome": "Felipe",
  "email": "felipe@email.com"
}
```

### **4. Atualizar usu√°rio**

```
PUT /usuarios/:id
Atualiza usu√°rio existente
Body JSON:
{
  "nome": "Felipe Atualizado",
  "email": "novoemail@email.com"
}
Ex.: PUT http://localhost:3000/usuarios/1
```

### **5. Deletar usu√°rio**

```
DELETE /usuarios/:id
Remove usu√°rio do banco
Ex.: DELETE http://localhost:3000/usuarios/1
```

### **6. Testando a API**

* Use **Thunder Client** ou **Postman**.
* Para front-end (React/JS):

```js
import axios from "axios";
const api = axios.create({ baseURL: "http://localhost:3000" });
const users = await api.get("/usuarios");
```

### **7. Mensagens √∫teis**

* **500:** Erro interno do servidor (algo deu ruim no backend)
* **404:** Usu√°rio n√£o encontrado
* **201:** Criado com sucesso (POST)

---

Se quiser, posso te fazer uma **vers√£o ainda mais visual**, tipo tabela ou checklist, que voc√™ consegue ver de relance o que cada rota faz e qual m√©todo usar ‚Äî fica top pro `anota√ß√µes.txt`.

Quer que eu fa√ßa essa vers√£o tamb√©m?
